from fastapi import FastAPI, Query, Path
from fastapi.responses import JSONResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from modules.zarr_loader import load_zarr
from modules.bounds import *
from datetime import datetime, timedelta
import io
import re
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import numpy as np
import pandas as pd
import matplotlib
import logging

matplotlib.use("Agg")

logger = logging.getLogger("uvicorn")

app = FastAPI(
    title="Fire Front Radar API",
    version="1.0.0",
    docs_url="/api/docs",
    openapi_url="/api/openapi.json"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],  # <--- frontend port
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/api/{index}")
async def get_index_metadata(
    index: str = Path(...),
    base: str = Query(...),
    lead: int = Query(...)
):
    try:
        ds = load_zarr(index)
        base_dt = datetime.fromisoformat(base.replace("Z", ""))
        valid_dt = base_dt + timedelta(hours=lead)

        lat_center = float(ds.lat.mean())
        lon_center = float(ds.lon.mean())

        return {
            "location": [lat_center, lon_center],
            "valid_time": valid_dt.isoformat()
        }
    except Exception as e:
        return JSONResponse(status_code=400, content={"error": str(e)})


@app.get("/api/{index}/heatmap/image")
def get_heatmap_image(
    index: str = Path(...),
    base: str = Query(...),
    lead: int = Query(...),
    bbox: str = Query(None)
):
    try:
        ds = load_zarr(index)
        param = list(ds.data_vars.keys())[0]
        logger.info(f"📥 Loaded index: {index}, param: {param}")

        encoding_source = str(ds.encoding.get("source", ""))
        match = re.search(rf"{index}_(\d{{10}})", encoding_source)
        base_time_str = match.group(1) if match else "2024120100"
        base_time = datetime.strptime(base_time_str, "%Y%m%d%H")
        logger.info(f"📆 Base file time: {base_time.isoformat()}")

        base_dt = datetime.fromisoformat(base.replace("Z", ""))
        valid_hours = (base_dt - base_time).total_seconds() / 3600 + lead
        logger.info(f"🕐 Requested valid hours from base: {valid_hours}")

        time_in_hours = np.array([
            (pd.to_datetime(t).to_pydatetime() - base_time).total_seconds() / 3600
            for t in ds.time.values
        ])
        time_index = int(np.argmin(np.abs(time_in_hours - valid_hours)))
        logger.info(f"🧭 Closest time index: {time_index}, Available times: {time_in_hours.tolist()}")

        if bbox:
            lat_min_raw, lon_min_raw, lat_max_raw, lon_max_raw = map(float, bbox.split(','))
            logger.info(f"📥 Received bbox from frontend: {bbox}")
            logger.info(f"📥 Parsed raw coords: {lat_min_raw}, {lon_min_raw}, {lat_max_raw}, {lon_max_raw}")
            lat_min, lon_min, lat_max, lon_max = normalize_bbox(
                lat_min_raw, lon_min_raw, lat_max_raw, lon_max_raw
            )
            logger.info(f"📐 Normalized bbox used for subset: {lat_min}, {lon_min}, {lat_max}, {lon_max}")
        else:
            lat_min, lat_max = float(ds.lat.min()), float(ds.lat.max())
            lon_min, lon_max = float(ds.lon.min()), float(ds.lon.max())
            lat_min, lon_min, lat_max, lon_max = normalize_bbox(
                lat_min, lon_min, lat_max, lon_max
            )
            logger.info(f"🛑 No bbox")

        lat_mask = (ds.lat >= lat_min) & (ds.lat <= lat_max)
        lon_mask = (ds.lon >= lon_min) & (ds.lon <= lon_max)

        subset = ds[param].isel(time=time_index).where(lat_mask & lon_mask, drop=True)
        logger.info(f"🗺️ Subset lat range: {float(subset.lat.min())} → {float(subset.lat.max())}")
        logger.info(f"🗺️ Subset lon range: {float(subset.lon.min())} → {float(subset.lon.max())}")

        data = np.nan_to_num(subset.values, nan=0.0)
        logger.info(f"📊 Data shape: {data.shape}, all NaN: {np.isnan(data).all()}")

        if data.size == 0:
            logger.warning("⚠️ No data in selected bounding box")
            return JSONResponse(status_code=400, content={"error": "No data in selected bounding box"})

        # Flip verticale se lat decrescente
        # Flip dei dati se la latitudine è decrescente
        data = np.flipud(data)

        lat = subset.lat.values
        lon = subset.lon.values
        n_lat, n_lon = data.shape

        lat_res = abs(lat[1] - lat[0])
        lon_res = abs(lon[1] - lon[0])

        # Calcola extent corretto ai bordi delle celle
        lat_min = min(lat) - lat_res / 2
        lat_max = max(lat) + lat_res / 2
        lon_min = min(lon) - lon_res / 2
        lon_max = max(lon) + lon_res / 2

        # Calcola proporzioni figura
        lat_range = lat_max - lat_min
        lon_range = lon_max - lon_min
        aspect_ratio = lon_range / lat_range if lat_range != 0 else 1

        height = 5
        width = height * aspect_ratio

        fig, ax = plt.subplots(figsize=(width, height), dpi=150)
        ax.axis("off")
        ax.set_aspect('auto')

        masked_data = np.ma.masked_invalid(data)
        cmap = plt.get_cmap("YlOrRd").copy()
        cmap.set_bad(color=(0, 0, 0, 0))

        logger.info(f"🖼️ Final extent used in imshow: {[lon_min, lon_max, lat_min, lat_max]}")

        ax.imshow(
            masked_data,
            cmap=cmap,
            extent=[lon_min, lon_max, lat_min, lat_max],
            origin="lower"
        )

        buf = io.BytesIO()
        plt.savefig(buf, format="png", bbox_inches="tight", pad_inches=0)
        plt.close(fig)
        buf.seek(0)

        logger.info(f"✅ Heatmap image generated for {index} [lead={lead}, bbox={bbox}]")
        return StreamingResponse(buf, media_type="image/png")

    except Exception as e:
        logger.exception("🔥 Heatmap generation failed")
        return JSONResponse(status_code=400, content={"error": str(e)})

